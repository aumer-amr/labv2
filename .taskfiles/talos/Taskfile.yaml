---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

vars:
  TALHELPER_CLUSTER_DIR: '{{.KUBERNETES_DIR}}/bootstrap/talos/clusterconfig'
  TALHELPER_CONFIG_FILE: '{{.KUBERNETES_DIR}}/bootstrap/talos/talconfig.yaml'
  TALHELPER_SECRET_FILE: '{{.KUBERNETES_DIR}}/bootstrap/talos/talsecret.sops.yaml'
  TALOSCONFIG: '{{.TALHELPER_CLUSTER_DIR}}/talosconfig'

env:
  TALOSCONFIG: '{{.TALOSCONFIG}}'

tasks:

  generate-config:
    desc: Generate Talos configuration
    cmd: talhelper genconfig --config-file {{.TALHELPER_CONFIG_FILE}} --secret-file {{.TALHELPER_SECRET_FILE}} --out-dir {{.TALHELPER_CLUSTER_DIR}}
    preconditions:
      - test -f {{.TALHELPER_CONFIG_FILE}}
      - test -f {{.SOPS_CONFIG_FILE}}
      - test -f {{.SOPS_AGE_KEY_FILE}}
      - which talhelper

  apply-node:
    desc: Apply Talos config to a node [HOSTNAME=required]
    cmds:
      - talosctl --nodes {{.HOSTNAME}} apply-config --mode={{.MODE}} --file {{.TALHELPER_CLUSTER_DIR}}/kubernetes-{{.HOSTNAME}}.yaml
      - talosctl --nodes {{.HOSTNAME}} health --wait-timeout=10m --server=false
    vars:
      MODE: '{{.MODE | default "auto"}}'
    requires:
      vars: [HOSTNAME]
    preconditions:
      - talosctl --nodes {{.HOSTNAME}} get machineconfig
      - talosctl config info
      - test -f {{.TALHELPER_CLUSTER_DIR}}/kubernetes-{{.HOSTNAME}}.yaml
      - test -f {{.TALOSCONFIG}}
      - which talosctl yq

  upgrade-node:
    desc: Upgrade Talos on a single node [HOSTNAME=required]
    cmds:
      - talosctl --nodes {{.HOSTNAME}} upgrade --image="factory.talos.dev/installer{{if eq .TALOS_SECUREBOOT "false"}}-secureboot{{end}}/{{.TALOS_SCHEMATIC_ID}}:{{.TALOS_VERSION}}" --timeout=10m
      - talosctl --nodes {{.HOSTNAME}} health --wait-timeout=10m --server=false
    vars:
      TALOS_SCHEMATIC_ID:
        sh: yq '.nodes[] | select(.hostname == "{{.HOSTNAME}}") | .talosImageURL' {{.TALHELPER_CONFIG_FILE}} | awk -F/ '{print $NF}'
      TALOS_SECUREBOOT:
        sh: yq '.nodes[] | select(.hostname == "{{.HOSTNAME}}") | .machineSpec.secureboot' {{.TALHELPER_CONFIG_FILE}}
      TALOS_VERSION:
        sh: yq '.talosVersion' {{.TALHELPER_CONFIG_FILE}}
    requires:
      vars: [HOSTNAME]
    preconditions:
      - curl -fsSL -o /dev/null --fail https://github.com/siderolabs/talos/releases/tag/{{.TALOS_VERSION}}
      - talosctl --nodes {{.HOSTNAME}} get machineconfig
      - talosctl config info
      - test -f {{.TALOSCONFIG}}
      - which kubectl talosctl yq

  upgrade-k8s:
    desc: Upgrade Kubernetes
    cmd: talosctl --nodes {{.KUBERNETES_CONTROLLER}} upgrade-k8s --to {{.KUBERNETES_VERSION}}
    vars:
      KUBERNETES_CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
      KUBERNETES_VERSION:
        sh: yq '.kubernetesVersion' {{.TALHELPER_CONFIG_FILE}}
    preconditions:
      - curl -fsSL -o /dev/null --fail https://github.com/siderolabs/kubelet/releases/tag/{{.KUBERNETES_VERSION}}
      - talosctl --nodes {{.KUBERNETES_CONTROLLER}} get machineconfig
      - talosctl config info
      - test -f {{.TALOSCONFIG}}
      - which talosctl yq

  reset:
    desc: Resets nodes back to maintenance mode
    dir: "{{.KUBERNETES_DIR}}/bootstrap/talos"
    prompt: This will destroy your cluster and reset the nodes back to maintenance mode... continue?
    cmd: talhelper gencommand reset --config-file {{.TALHELPER_CONFIG_FILE}} --out-dir {{.TALHELPER_CLUSTER_DIR}} --extra-flags="--reboot {{- if eq .CLI_FORCE false }} --system-labels-to-wipe STATE --system-labels-to-wipe EPHEMERAL{{ end }} --graceful=false --wait=false" | bash
  preconditions:
    - which talhelper
